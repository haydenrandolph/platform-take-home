// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api.proto

package types

import (
	context "context"
	errors "errors"
	fmt "fmt"
	//config "github.com/shengyjs/utility/config" does not exist
	grpc "google.golang.org/grpc"
	insecure "google.golang.org/grpc/credentials/insecure"
	log "log"
	time "time"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// 配置文件结构
type serviceConfig struct {
	IP   string `ini:"ip"`
	Port string `ini:"port"`
}

// TakeHomeServiceServiceClient is the client API for TakeHomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.

// 客户端结构
type TakeHomeServiceServiceClient struct {
	conf   *serviceConfig
	conn   *grpc.ClientConn
	client TakeHomeServiceClient
}

func (cc *TakeHomeServiceServiceClient) Init(configFile string) error {
	// 设置配置信息
	if cc.conf == nil {
		// 读取配置信息
		conf := new(serviceConfig)
		errCode := config.GetConfigItem(configFile, "TakeHomeService", conf)
		if errCode != config.ERR_OK {
			log.Printf("GetConfigItem Fail. errCode = %v", errCode)
			return errors.New("GetConfigItem Fail.")
		}
		log.Printf("conf is %v", conf)
		cc.conf = conf
	} else {
		log.Printf("conf is exit. conf = %v ", cc.conf)
	}

	// 建立连接
	if cc.conn == nil {
		var opts []grpc.DialOption
		opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
		conn, err := grpc.Dial(fmt.Sprintf("%s:%s", cc.conf.IP, cc.conf.Port), opts...)
		if err != nil {
			log.Printf("Dail Fail. err = %v", err)
			return err
		}
		log.Printf("conn is %v", conn)
		cc.conn = conn
	} else {
		log.Printf("conn is exit. conn = %v", cc.conn)
	}

	// 创建客户端
	cc.client = NewTakeHomeServiceClient(cc.conn)
	return nil
}

// 关闭连接
func (cc *TakeHomeServiceServiceClient) Close() error {
	log.Printf("Close. conf = %v, conn = %v", cc.conf, cc.conn)
	// 连接存在的话，就关闭
	if cc.conn != nil {
		err := cc.conn.Close()
		if err != nil {
			log.Printf("conn.Close Fail. err = %v", err)
			return err
		}
	} else {
		log.Printf("Do not have conn")
	}

	cc.conf = nil
	cc.conn = nil
	cc.client = nil
	return nil
}

func (cc *TakeHomeServiceServiceClient) GetItems(req *EmptyRequest) (*GetItemsResponse, error) {
	log.Printf("GetItems. req = %v", req)

	// 创建context
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// 调用
	resp, err := cc.client.GetItems(ctx, req)
	log.Printf("resp = %v", resp)
	if err != nil {
		log.Printf("client.GetItems Fail. req = %v, err = %v", req, err)
		return resp, err
	}
	return resp, nil
}
func (cc *TakeHomeServiceServiceClient) GetItem(req *GetItemRequest) (*GetItemResponse, error) {
	log.Printf("GetItem. req = %v", req)

	// 创建context
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// 调用
	resp, err := cc.client.GetItem(ctx, req)
	log.Printf("resp = %v", resp)
	if err != nil {
		log.Printf("client.GetItem Fail. req = %v, err = %v", req, err)
		return resp, err
	}
	return resp, nil
}
func (cc *TakeHomeServiceServiceClient) CreateItem(req *CreateItemRequest) (*CreateItemResponse, error) {
	log.Printf("CreateItem. req = %v", req)

	// 创建context
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// 调用
	resp, err := cc.client.CreateItem(ctx, req)
	log.Printf("resp = %v", resp)
	if err != nil {
		log.Printf("client.CreateItem Fail. req = %v, err = %v", req, err)
		return resp, err
	}
	return resp, nil
}
